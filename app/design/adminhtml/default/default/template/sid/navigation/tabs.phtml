<?php
/**
 */
?>


<?php if($this->getTitle()): ?>
    <h3><?php echo $this->getTitle() ?></h3>
<?php endif ?>


<?php if(!empty($tabs)): ?>
<ul id="<?php echo $this->getId() ?>" class="tabs">
<?php foreach ($tabs as $_tab): ?>
<?php if (!$this->canShowTab($_tab)): continue;  endif; ?>
    <li <?php if($this->getTabIsHidden($_tab)): ?> style="display:none"<?php endif; ?>>
        <a href="<?php echo $this->getTabUrl($_tab) ?>" id="<?php echo $this->getTabId($_tab) ?>" name="<?php echo $this->getTabId($_tab, false) ?>" 
        title="<?php echo Mage::helper('core')->quoteEscape($this->getTabTitle($_tab)) ?>" class="tab-item-link <?php echo $this->getTabClass($_tab) ?><?php if (preg_match('/\s?ajax\s?/', $_tab->getClass())) {?> notloaded<?php }?>">
           </a>
        <div id="<?php echo $this->getTabId($_tab) ?>_content" style="display:none;"><?php echo $this->getTabContent($_tab) ?></div>
    </li>
<?php endforeach; ?>
</ul>
<script type="text/javascript">
    <?php echo $this->getJsObjectName() ?> = new varienTabs('<?php echo $this->getId() ?>', '<?php echo $this->getDestElementId() ?>', '<?php echo $this->getActiveTabId() ?>', <?php echo $this->getAllShadowTabs()?>);
</script>
<?php endif; ?>


<div >
<button class="" onclick="nodeOptions.add();" type="button">New</button>
<button class="btn btn-warning btn-sm" onclick="nodeOptions.edit();" type="button">Rename</button>
<button class="btn btn-danger btn-sm" onclick="nodeOptions.remove();" type="button">Delete</button>
</div>


<div id="jstree_demo" class="demo">Baum</div>


<link rel="stylesheet" href="<?php echo $this->getJsUrl() ?>egovs/jstree/themes/default/style.min.css" />
<script type="text/javascript" src="<?php echo $this->getJsUrl() ?>lib/jquery/jquery-1.10.2.js"></script>
<script type="text/javascript" src="<?php echo $this->getJsUrl() ?>lib/jquery/noconflict.js"></script>
<script type="text/javascript" src="<?php echo $this->getJsUrl() ?>egovs/jstree/jstree.js"></script>

<div id="category_details" ></div>


<script type="text/javascript">
//<![CDATA[

$j('#jstree_demo').jstree({
	  "core" : {
	    "animation" : 0,
	    "check_callback" : true,
	    "themes" : { "stripes" : true },
	    'data' :[
					{ "text" : "<?php echo Mage::helper('sidcms')->__('Root node')?>"}
					              			]
	  },
	  "types" : {
	    "#" : {
	      "max_children" : 10,
	      "max_depth" : 4,
	      "valid_children" : ["root"]
	    },
	    "root" : {
	      "icon" : "/static/3.3.2/assets/images/tree_icon.png",
	      "valid_children" : ["default"]
	    },
	    "default" : {
	      "valid_children" : ["default","file"]
	    },
	    "file" : {
	      "icon" : "glyphicon glyphicon-file",
	      "valid_children" : []
	    }
	  },
	  "plugins" : [
	    "contextmenu", "dnd", "search",
	    "state", "types", "wholerow"
	  ]
	});

$j('#jstree_demo').on("changed.jstree", function (e, data) {
	if(data.selected.length) {
		//alert('The selected node is: ' + data.instance.get_node(data.selected[0]).text);
		nodeOptions.show(data.instance.get_node(data.selected[0]));
	}
});
$j('#jstree_demo').on("rename_node.jstree", function (e, data) {
	if(data.node) {
		//alert('The selected node is: ' + data.instance.get_node(data.selected[0]).text);
		nodeOptions.rename(data.node,data.text);
	}
});
$j('#jstree_demo').on("move_node.jstree", function (e, data) {
	if(data.node) {
		//alert('The selected node is: ' + data.instance.get_node(data.selected[0]).text);
		nodeOptions.move(data.node, data.position);
	}
});
$j('#jstree_demo').on("ready.jstree", function (e, data) {
	init_db_nodes();
});






var nodeTemplate = '<div style="display:none" id="node_options_{{number}}" class="hor-scroll"><table cellspacing="0" class="form-list"><tbody>' +
				'<input type="hidden" id="node_options_{{number}}_is_delete" name="node_options[{{number}}][is_delete]" value="" />'+
				'<input type="hidden" name="node_options[{{number}}][id]" value="{{id}}" />'+
				'<input type="hidden" id="node_options_{{number}}_name" name="node_options[{{number}}][label]" value="{{label}}" />'+
				'<input type="hidden" id="node_options_{{number}}_number" name="node_options[{{number}}][number]" value="{{number}}" />'+
				'<input type="hidden" id="node_options_{{number}}_parent" name="node_options[{{number}}][parent]" value="{{parent}}" />'+
				'<input type="hidden" id="node_options_{{number}}_pos" name="node_options[{{number}}][pos]" value="{{pos}}" />'+
				'<tr id="node_options_{{number}}"><td  class="label">' +
				'<label for="title">Pages</label>' +
				'</td>' +
				'<td class=2value"><select multiple="multiple" size="15" class="select"  id="node_options_{{number}}_pages" name="node_options[{{number}}][pages]">' +
				'	<?php foreach ($this->getPages() as $key=>$value): ?>' +
				'			<option value="<?php echo($key)?>"><?php echo($value) ?></option>' +
				'	<?php endforeach; ?>' +
				'</select></td>'+
				'</tr>'+
				'</tbody></table></div>';



				
var nodeOptions = {
		div : $j("#navi_form"),
		tree : $j("#jstree_demo"),
		templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
		templateText : nodeTemplate,
		itemCount : 0,
		pos : 0,
		kategories : [],
		show : function(node) {
			this.hideAll();
			if(node.data){
				var elem = $j("#node_options_"+node.data.number);
				if(elem){
					elem.show();
				}
			}
			//Element.insert(this.div, {'':this.template.evaluate(data)});
		},
		hideAll : function(){
			for (var i = 1; i <= this.itemCount; i++){
					var elem = $j("#node_options_"+i);
					if(elem.length != 0)
					{
						elem.hide();
					}
			}
		},
		rename : function(node, $text) {
			var elem = $j("#node_options_" + node.data.number + "_name");
			if(elem){
				elem.val($text);
			}
		},
		move : function(node, pos) {
			if(node)
			{
				var ref = this.tree.jstree(true);
				var parent = ref.get_node(node.parent);
				var elem = $j("#node_options_" + node.data.number + "_parent");
				if(parent.data){
					elem.val(parent.data.number);
				}else{
					elem.val('0');
				}
				var pos = 0;
				for(var childId in parent.children)
				{
					var child = ref.get_node(parent.children[childId]);
					if(child){
						var elem = $j("#node_options_" + child.data.number + "_pos");
						elem.val(pos);
						pos++;
					}
				}
			}
		},
		
		add: function(data, sel) {
			
			var ref = this.tree.jstree(true);
			var edit = false;

			this.itemCount++;
			if(!sel)
			{
				var	sel = ref.get_selected();
				if(!sel.length) { return false; }
				sel = sel[0];
				ref.open_node(sel);
				edit = true;
			}
			else if(sel == 'root')
			{
				sel =  ref.get_node('j1_1');
				//var children = sel.children;// ref.get_children_dom(sel);
				//var cild = children[0];
			} 
			
			if(!data){
				var data = new Object();
				
				data.name = 'default';
				data.label = 'New Node';
			}
			data.number = this.itemCount;
			
			sel = ref.create_node(sel,  {"type":"default","data":data, "text" : data.label});
			if(sel && edit) {
				ref.edit(sel);
			}
			this.template = new Template(this.templateText, this.templateSyntax);
			var content = this.template.evaluate(data);
			this.div.html( this.div.html() + content);
			
			var node = ref.get_node(sel);
			this.move(node, this.itemCount);
				
			
			return node.id;
			
		},
		remove: function(data) {
			this.hideAll();
			var ref = this.tree.jstree(true);
			var	sel = ref.get_selected();
			if(!sel.length) { return false; }
			var node = ref.get_node(sel);
			var elem = $j("#node_options_" + node.data.number + "_is_delete");
			elem.val(1);
			ref.delete_node(sel);
		},

		edit: function(data) {
			var ref = this.tree.jstree(true);
			var	sel = ref.get_selected();
			if(!sel.length) { return false; }
			sel = sel[0];
			ref.edit(sel);
		},
		xxadd : function(data) {
			this.template = new Template(this.templateText, this.templateSyntax);
			if(!data){
			var data = new Object();
			} 
			
			data.number = this.itemCount;
			
			if (data.pos) {
			this.pos = Math.max(data.pos,this.pos);
			}else{
			this.pos++;
			data.pos = this.pos;
			}
			
			Element.insert(this.div, {'before':this.template.evaluate(data)});
			
			//set selected fieldname
			if (data.name) {
			$A($('personal_options_'+data.number+'_field').options).each(function(option){
			if (option.value==data.name) option.selected = true;
			});
			}
			
			//set selected is_require
			if (data.required == '1') {
			$('personal_options_'+data.number+'_required').checked = true;
			}
			
			this.itemCount++;
			this.bindRemoveButtons();
			
		},
		bindRemoveButtons : function(){
		var buttons = $$('button.delete-personal-option');
		for(var i=0;i<buttons.length;i++){
		if(!$(buttons[i]).binded){
		$(buttons[i]).binded = true;
		Event.observe(buttons[i], 'click', this.remove.bind(this));
		}
		}
		
		var inputs = $$('div.personal-options button', 'div.personal-options input');
		inputs.each(function(el) { Event.observe(el, 'change', el.setHasChanges.bind(el));  } )
		
		}
}

function init_db_nodes()
{
<?php foreach ($this->getNodes() as $node):
	$parent = $node->getParentId();
	if($node->getParentId())
	{
		$parent = 'node_'.$node->getParentId();
	}
	else{
		$parent = '"root"';
	}
	echo "var node_".$node->getId()." = nodeOptions.add(".$node->toJson().",$parent);"

?>
<?php endforeach;?>
}

//]]>
</script>

